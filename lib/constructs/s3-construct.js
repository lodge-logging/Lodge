const cdk = require('@aws-cdk/core');
const s3 = require('@aws-cdk/aws-s3');

class s3 extends cdk.Construct {
  constructor(scope, id, props) {
    super(scope, id, props);

    // create the s3 bucket
    const s3Bucket = new s3.Bucket(this, 's3-bucket', {
      // bucketName - will be auto generated by CF
      removalpolicy: cdk.RemovalPolicy.DESTROY, // destroy bucket when stack deleted
      autoDeleteObjects: true, // empty bucket content when stack deleted
      versioned: false, 
      publicReadAccess: false, // no public access for READ
      encryption: s3.BucketEncryption.S3_MANAGED, // server side encryption
      lifecycleRules: [
        {
          transitions: [
            { storageClass: s3.StorageClass.INFREQUENT_ACCESS,
              transitionAfter: cdk.Duration.days(30),
            },
            { storageClass: s3.StorageClass.INTELLIGENT_TIERING,
              transitionAfter: cdk.Duration.days(60),
            },
            { storageClass: s3.StorageClass.GLACIER,
              transitionAfter: cdk.Duration.days(90),
            },
            { storageClass: s3.StorageClass.DEEP_ARCHIVE,
              transitionAfter: cdk.Duration.days(180),
            },
          ]
        }
      ]
    });

    // create the bucket policy
    const bucketPolicy = new s3.bucketPolicy(this, 's3-bucket-policy', {
      bucket: s3Bucket,
    });


    bucketPolicy.document.addStatements(
      new PolicyStatement({

      })
    );
  } 
}

module.exports = { s3 };
